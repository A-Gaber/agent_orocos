#!/usr/bin/python
import sys

import roslib

import gencpp
import genmsg

from  roslib import packages,msgs
import os

from cStringIO import StringIO

import argparse

import parse_subsystem_xml

def generate_boost_serialization(package, port_def, output_cpp):
    """
    Generate a boost::serialization header

    @param msg_path: The path to the .msg file
    @type msg_path: str
    """
    mc = genmsg.msg_loader.MsgContext()

#    spec = genmsg.msg_loader.load_msg_from_file(mc, msg_path, msg_type)
#    cpp_prefix = '%s::'%(package)

    with open(port_def, 'r') as f:
        read_data = f.read()

    sd = parse_subsystem_xml.parseSubsystemXml(read_data)

    s = StringIO()
    s.write("// autogenerated by rtt_subsystem_ports/create_master_h.py\n")
    s.write("// do not modify this file\n\n")
    s.write("#include <rtt/plugin/ServicePlugin.hpp>\n")
    s.write("#include <rtt/extras/PeriodicActivity.hpp>\n")
    s.write("#include \"rtt/Logger.hpp\"\n")
    s.write("#include <rtt/base/DataObjectLockFree.hpp>\n")
    s.write("#include <ros/param.h>\n")
    s.write("#include <rtt_rosclock/rtt_rosclock.h>\n")


    s.write("#include \"common_behavior/master_service.h\"\n")
    s.write("#include \"" + package + "/master.h\"\n")

    s.write("\nnamespace " + package + "_types {\n\n")

    s.write("class " + package + "_Master : public common_behavior::MasterService {\n")
    s.write("public:\n")
    s.write("    explicit " + package + "_Master(RTT::TaskContext* owner)\n")
    s.write("        : common_behavior::MasterService(owner)\n")
    s.write("        , owner_(owner)\n")
    s.write("        , port_no_data_trigger_in__(\"no_data_trigger_INPORT_\")\n")
    s.write("    {\n")

    for p_in in sd.ports_in:
        if p_in.event:
            s.write("        owner_->addEventPort(\"" + p_in.alias + "_INPORT\", port_" + p_in.alias + "_in_);\n")
        else:
            s.write("        owner_->addPort(\"" + p_in.alias + "_INPORT\", port_" + p_in.alias + "_in_);\n")
        s.write("        owner_->addPort(\"" + p_in.alias + "_OUTPORT\", port_" + p_in.alias + "_out_);\n\n")

    s.write("\n        owner_->addEventPort(port_no_data_trigger_in__);\n")

    s.write("        bool use_sim_time = false;\n")
    s.write("        ros::param::get(\"/use_sim_time\", use_sim_time);\n")
    s.write("        if (use_sim_time) {\n")
#        s.write("        bool use_sim_time = false;\n")
#        s.write("        ros::param::get(\"/use_sim_time\", use_sim_time);\n")
#        s.write("        if (use_sim_time) {\n")
    if sd.trigger_gazebo:
        s.write("            if (!boost::dynamic_pointer_cast<RTT::internal::GlobalService >(RTT::internal::GlobalService::Instance())->require(\"gazebo_rtt_service\")) {\n")
        s.write("                RTT::Logger::log() << RTT::Logger::Error << \"could not load service 'gazebo_rtt_service'\" << RTT::Logger::endl;\n")
        s.write("            }\n")
        s.write("            else {\n")
        s.write("                RTT::Service::shared_ptr gazebo_rtt_service = RTT::internal::GlobalService::Instance()->getService(\"gazebo_rtt_service\");\n")
        s.write("                RTT::OperationInterfacePart *singleStepOp = gazebo_rtt_service->getOperation(\"singleStep\");\n")
        s.write("                if (singleStepOp == NULL) {\n")
        s.write("                    RTT::Logger::log() << RTT::Logger::Error << \"the service \" << gazebo_rtt_service->getName() << \" has no matching operation singleStep\" << RTT::Logger::endl;\n")
        s.write("                }\n")
        s.write("                else {\n")
        s.write("                    singleStep_ =  RTT::OperationCaller<void()>(singleStepOp);\n")
        s.write("                }\n")
        s.write("            }\n")

    if sd.use_ros_sim_clock:
        s.write("             rtt_rosclock::use_ros_clock_topic();\n")

#        s.write("            RTT::Service::shared_ptr rosclock = RTT::internal::GlobalService::Instance()->getService(\"ros\")->getService(\"clock\");\n")
#
#        s.write("            RTT::Service::shared_ptr rosclock = RTT::internal::GlobalService::Instance()->getService(\"ros\")->getService(\"clock\");\n")
#        s.write("            if (!rosclock) {\n")
#        s.write("                RTT::Logger::log() << RTT::Logger::Error << \"could not get 'ros.clock' service\" << RTT::Logger::endl;\n")
#        s.write("            }\n")
#        s.write("            else {\n")
#        s.write("                RTT::OperationCaller<void()> useROSClockTopic = rosclock->getOperation(\"useROSClockTopic\");\n")
#        s.write("                if (!useROSClockTopic.ready()) {\n")
#        s.write("                    RTT::Logger::log() << RTT::Logger::Error << \"could not get 'useROSClockTopic' operation of 'ros.clock'\" << RTT::Logger::endl;\n")
#        s.write("                }\n")
#        s.write("                else {\n")
#        s.write("                    useROSClockTopic();\n")
#        s.write("                }\n")
#        s.write("            }\n")
    else:
        s.write("            rtt_rosclock::use_manual_clock();\n")

    s.write("            rtt_rosclock::enable_sim();\n")

    s.write("        }\n")

    if sd.period != None:
        if sd.use_sim_clock:
            s.write("            owner->loadService(\"sim_clock_activity\");\n")
        s.write("        owner->setPeriod(" + str(sd.period) + ");\n")

#    s.write("        }\n")

    s.write("    }\n\n")

    s.write("    virtual ~" + package + "_Master() {\n")
    s.write("    }\n\n")

    s.write("    virtual void initBuffers(boost::shared_ptr<common_behavior::InputData >& in_data) const {\n")
    s.write("        boost::shared_ptr<InputData > in = boost::static_pointer_cast<InputData >(in_data);\n")
    for p_in in sd.ports_in:
        s.write("        in->" + p_in.alias + " = " + p_in.getTypeCpp() + "();\n")
    s.write("    }\n\n")

    s.write("    virtual void readIpcPorts(boost::shared_ptr<common_behavior::InputData >& in_data) {\n")
    s.write("        boost::shared_ptr<InputData > in = boost::static_pointer_cast<InputData >(in_data);\n")
    for p_in in sd.ports_in:
        if not p_in.ipc:
            continue
        no_data_max = 50
        if p_in.event:
            no_data_max = 50
        s.write("        if (port_" + p_in.alias + "_in_.read(in->" + p_in.alias + ", false) != RTT::NewData) {\n")
        s.write("            if (" + p_in.alias + "_no_data_counter_ >= " + str(no_data_max) + ") {\n")
        s.write("                in->" + p_in.alias + " = " + p_in.getTypeCpp() + "();\n")
        s.write("            }\n")
        s.write("            else {\n")
        s.write("                " + p_in.alias + "_no_data_counter_++;\n")
        s.write("                in->" + p_in.alias + " = " + p_in.alias + "_prev_;\n")
        s.write("            }\n")
        s.write("        }\n")
        s.write("        else {\n")
        s.write("            " + p_in.alias + "_no_data_counter_ = 0;\n")
        s.write("            " + p_in.alias + "_prev_ = in->" + p_in.alias + ";\n")
        s.write("        }\n")
    s.write("    }\n\n")

    s.write("    virtual void readInternalPorts(boost::shared_ptr<common_behavior::InputData >& in_data) {\n")
    s.write("        boost::shared_ptr<InputData > in = boost::static_pointer_cast<InputData >(in_data);\n")
    for p_in in sd.ports_in:
        if p_in.ipc:
            continue
        s.write("        if (port_" + p_in.alias + "_in_.read(in->" + p_in.alias + ", false) != RTT::NewData) {\n")
        s.write("            in->" + p_in.alias + " = " + p_in.getTypeCpp() + "();\n")
        s.write("        }\n")
    s.write("    }\n\n")

    s.write("    virtual void writePorts(boost::shared_ptr<common_behavior::InputData>& in_data) {\n")
    s.write("        boost::shared_ptr<InputData> in = boost::static_pointer_cast<InputData >(in_data);\n")
    for p_in in sd.ports_in:
        s.write("        port_" + p_in.alias + "_out_.write(in->" + p_in.alias + ");\n")
    s.write("    }\n\n")

    s.write("    virtual boost::shared_ptr<common_behavior::InputData > getDataSample() const {\n")
    s.write("        boost::shared_ptr<InputData > ptr(new InputData());\n")
    for p_in in sd.ports_in:
        s.write("        ptr->" + p_in.alias + " = " + p_in.getTypeCpp() + "();\n")
    s.write("        return boost::static_pointer_cast<common_behavior::InputData >( ptr );\n")
    s.write("    }\n\n")

    s.write("    virtual void getLowerInputBuffers(std::vector<common_behavior::InputBufferInfo >& info) const {\n")
    s.write("        info = std::vector<common_behavior::InputBufferInfo >();\n")
    for p in sd.ports_in:
        if p.side == 'bottom':
            if p.event:
                s.write("        info.push_back(common_behavior::InputBufferInfo(" + str(p.ipc).lower() + ", \"" + p.getTypeStr() + "\", \"" + p.alias + "\", true, " + str(p.period_min) + ", " + str(p.period_avg) + ", " + str(p.period_max) + "));\n")
            else:
                s.write("        info.push_back(common_behavior::InputBufferInfo(" + str(p.ipc).lower() + ", \"" + p.getTypeStr() + "\", \"" + p.alias + "\"));\n")
    s.write("    }\n\n")

    s.write("    virtual void getUpperInputBuffers(std::vector<common_behavior::InputBufferInfo >& info) const {\n")
    s.write("        info = std::vector<common_behavior::InputBufferInfo >();\n")
    for p in sd.ports_in:
        if p.side == 'top':
            if p.event:
                s.write("        info.push_back(common_behavior::InputBufferInfo(" + str(p.ipc).lower() + ", \"" + p.getTypeStr() + "\", \"" + p.alias + "\", true, " + str(p.period_min) + ", " + str(p.period_avg) + ", " + str(p.period_max) + "));\n")
            else:
                s.write("        info.push_back(common_behavior::InputBufferInfo(" + str(p.ipc).lower() + ", \"" + p.getTypeStr() + "\", \"" + p.alias + "\"));\n")
    s.write("    }\n\n")

    s.write("    virtual void getLowerOutputBuffers(std::vector<common_behavior::OutputBufferInfo >& info) const {\n")
    s.write("        info = std::vector<common_behavior::OutputBufferInfo >();\n")
    for p in sd.ports_out:
        if p.side == 'bottom':
            s.write("        info.push_back(common_behavior::OutputBufferInfo(" + str(p.ipc).lower() + ", \"" + p.getTypeStr() + "\", \"" + p.alias + "\"));\n")
    s.write("    }\n\n")

    s.write("    virtual void getUpperOutputBuffers(std::vector<common_behavior::OutputBufferInfo >& info) const {\n")
    s.write("        info = std::vector<common_behavior::OutputBufferInfo >();\n")
    for p in sd.ports_out:
        if p.side == 'top':
            s.write("        info.push_back(common_behavior::OutputBufferInfo(" + str(p.ipc).lower() + ", \"" + p.getTypeStr() + "\", \"" + p.alias + "\"));\n")
    s.write("    }\n\n")

    s.write("    virtual std::vector<std::string > getStates() const {\n")
    s.write("        return std::vector<std::string >({\n")
    for st in sd.states:
        s.write("                   \"" + st + "\",\n")
    s.write("                   \"" + sd.initial_state + "\"});\n")
    s.write("    }\n\n")

    s.write("    virtual std::string getInitialState() const {\n")
    s.write("        return \"" + sd.initial_state + "\";\n")
    s.write("    }\n\n")

    s.write("    virtual std::vector<std::pair<std::string, std::string > > getLatchedConnections() const {\n")
    s.write("        return std::vector<std::pair<std::string, std::string > > ({\n")
    for lc in sd.latched_components:
        s.write("                std::make_pair(std::string(\"" + lc[0] + "\"), std::string(\"" + lc[1] + "\")),\n")
    s.write("            });\n")
    s.write("    }\n\n")

    s.write("    virtual int getInputDataWaitCycles() const {\n")
    s.write("        return " + str(sd.no_input_wait_cycles) + ";\n")
    s.write("    }\n\n")

    s.write("    // this method is not RT-safe\n")
    s.write("    virtual std::string getErrorReasonStr(common_behavior::AbstractConditionCauseConstPtr error_reason) const {\n")
    s.write("        ErrorCauseConstPtr r = boost::dynamic_pointer_cast<const ErrorCause >(error_reason);\n")
    s.write("        return " + package + "_types::getErrorReasonStr(r);\n")
    s.write("    }\n\n")

    s.write("    // this method is not RT-safe\n")
    s.write("    virtual common_behavior::AbstractConditionCausePtr getErrorReasonSample() const {\n")
    s.write("        ErrorCausePtr ptr(new ErrorCause());\n")
    s.write("        return boost::dynamic_pointer_cast<common_behavior::AbstractConditionCause >( ptr );\n")
    s.write("    }\n\n")

    s.write("    virtual void iterationEnd() {\n")
    if sd.trigger_gazebo:
        s.write("        singleStep_();\n")
    else:
        s.write("        // do nothing\n")
    s.write("    }\n\n")

    s.write("protected:\n")
    for p in sd.ports_in:
        s.write("    " + p.getTypeCpp() + " " + p.alias + "_prev_;\n")
        s.write("    int " + p.alias + "_no_data_counter_;\n")
        s.write("    RTT::InputPort<" + p.getTypeCpp() + " > port_" + p.alias + "_in_;\n")
        s.write("    RTT::OutputPort<" + p.getTypeCpp() + " > port_" + p.alias + "_out_;\n")

    s.write("\n    RTT::InputPort<bool > port_no_data_trigger_in__;\n")

    s.write("\n    RTT::TaskContext* owner_;\n")
    if sd.trigger_gazebo:
        s.write("    RTT::OperationCaller<void()> singleStep_;\n")

    s.write("};\n\n")

    s.write("std::string getErrorReasonStr(ErrorCauseConstPtr err) {\n")
    s.write("    std::string result;\n")
    for e in sd.errors:
        s.write("    result += (err->getBit(" + e + "_bit)?\"" + e + " \":\"\");\n")
    s.write("    return result;\n")
    s.write("}\n\n")

    s.write("};  // namespace " + package + "_types\n\n")

    s.write("ORO_SERVICE_NAMED_PLUGIN(" + package + "_types::" + package + "_Master, \"" + package + "_master\");\n")


    (output_dir,filename) = os.path.split(output_cpp)
    try:
        os.makedirs(output_dir)
    except OSError, e:
        pass

    f = open(output_cpp, 'w')
    print >> f, s.getvalue()

    s.close()


def create_boost_headers(argv, stdout, stderr):
    parser = argparse.ArgumentParser(description='Generate boost serialization header for ROS message.')
    parser.add_argument('pkg',metavar='PKG',type=str, nargs=1,help='The package name.')
    parser.add_argument('port_def',metavar='PORT_DEF',type=str, nargs=1,help='Port definition file.')
    parser.add_argument('output_cpp',metavar='OUTPUT_CPP',type=str, nargs=1,help='Output cpp file.')

    args = parser.parse_args()

    print args.pkg[0], args.port_def[0], args.output_cpp[0]

    generate_boost_serialization(args.pkg[0], args.port_def[0], args.output_cpp[0])

if __name__ == "__main__":
    try:
        create_boost_headers(sys.argv, sys.stdout, sys.stderr)
    except Exception, e:
        sys.stderr.write("Failed to generate boost headers: " + str(e))
        raise
        #sys.exit(1)

