// Generated by gencpp from file common_interfaces_test_msgs/SubSubContainer.msg
// DO NOT EDIT!


#ifndef COMMON_INTERFACES_TEST_MSGS_MESSAGE_SUBSUBCONTAINER_H
#define COMMON_INTERFACES_TEST_MSGS_MESSAGE_SUBSUBCONTAINER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common_interfaces_test_msgs
{
template <class ContainerAllocator>
struct SubSubContainer_
{
  typedef SubSubContainer_<ContainerAllocator> Type;

  SubSubContainer_()
    : field1(0)
    , field1_valid(false)
    , field2(0)  {
    }
  SubSubContainer_(const ContainerAllocator& _alloc)
    : field1(0)
    , field1_valid(false)
    , field2(0)  {
  (void)_alloc;
    }



   typedef uint32_t _field1_type;
  _field1_type field1;

   typedef uint8_t _field1_valid_type;
  _field1_valid_type field1_valid;

   typedef uint32_t _field2_type;
  _field2_type field2;




  typedef boost::shared_ptr< ::common_interfaces_test_msgs::SubSubContainer_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_interfaces_test_msgs::SubSubContainer_<ContainerAllocator> const> ConstPtr;

}; // struct SubSubContainer_

typedef ::common_interfaces_test_msgs::SubSubContainer_<std::allocator<void> > SubSubContainer;

typedef boost::shared_ptr< ::common_interfaces_test_msgs::SubSubContainer > SubSubContainerPtr;
typedef boost::shared_ptr< ::common_interfaces_test_msgs::SubSubContainer const> SubSubContainerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_interfaces_test_msgs::SubSubContainer_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_interfaces_test_msgs::SubSubContainer_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace common_interfaces_test_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'common_interfaces_test_msgs': ['/home/dseredyn/ws_sim_safety2/sim/src/common_interfaces_test_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::common_interfaces_test_msgs::SubSubContainer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_interfaces_test_msgs::SubSubContainer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_interfaces_test_msgs::SubSubContainer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_interfaces_test_msgs::SubSubContainer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_interfaces_test_msgs::SubSubContainer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_interfaces_test_msgs::SubSubContainer_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_interfaces_test_msgs::SubSubContainer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb3690d9df1e0d4db66245734f2114e6";
  }

  static const char* value(const ::common_interfaces_test_msgs::SubSubContainer_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb3690d9df1e0d4dULL;
  static const uint64_t static_value2 = 0xb66245734f2114e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_interfaces_test_msgs::SubSubContainer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_interfaces_test_msgs/SubSubContainer";
  }

  static const char* value(const ::common_interfaces_test_msgs::SubSubContainer_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_interfaces_test_msgs::SubSubContainer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 field1\n\
bool field1_valid\n\
\n\
uint32 field2\n\
\n\
";
  }

  static const char* value(const ::common_interfaces_test_msgs::SubSubContainer_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_interfaces_test_msgs::SubSubContainer_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.field1);
      stream.next(m.field1_valid);
      stream.next(m.field2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct SubSubContainer_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_interfaces_test_msgs::SubSubContainer_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_interfaces_test_msgs::SubSubContainer_<ContainerAllocator>& v)
  {
    s << indent << "field1: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.field1);
    s << indent << "field1_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.field1_valid);
    s << indent << "field2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.field2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_INTERFACES_TEST_MSGS_MESSAGE_SUBSUBCONTAINER_H
